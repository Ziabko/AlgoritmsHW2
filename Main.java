public class Main {
    public static void main(String[] args) {

        //Task1

//        int n = 8;
//
//        if (n == 1) {
//            return;
//        }
//
//        for (int i = 1; i <= n; i++) {
//            for (int j = 1; j <= n; j++) {
//                System.out.print("*");
//                break;
//            }
//        }
//    }


        //Внешний цикл for выполняется n раз.
//Внутренний цикл печатает "*" только один раз, т. к. break
// Временная сложность: O(n)


//**********************************************
//Task2

//        int n = 8;
//        int a = 0;
//
//        for (int i = n / 2; i <= n; i++) {
//            for (int j = 2; j <= n; j *= 2) {
//                a = a + n / 2;
//            }
//        }

        //Внешний цикл выполняется O(n) раз.
        //Внутренний цикл выполняется O(log n) раз.




//******************************************
        //Task3
//        int n = 5;
//        int a = 0;
//
//        for (int i = 0; i < n; i++) {
//            for (int j = n; j > i; j--) {
//                a = a + i + j;
//            }
//        }

//        System.out.println("Результат: " + a);

//        Внешний цикл выполняется n раз, а внутренний
//        цикл выполняется n - i раз для каждого i:
//        Количество итераций внутреннего цикла: n+(n−1)+(n−2)+…+1
//        Сумма итераций: (n*(n+1))/2=O(n)²
//        временная сложность этого алгоритма — O(n²).

//************************************************
//        Task 4
        int n = 16; // Пример значения n
        int a = 0;
        int i = n;

        while (i > 0) {
            a = a + i;
            i = i / 2;
        }

        System.out.println("Результат: " + a);
    }
}

//i уменьшается вдвое на каждой итерации, количество итераций
// цикла while пропорционально количеству
// делений n на 2 до тех пор, пока i не станет равным 0.
//Количествоитераций=log2(n)
//временная сложность  — O(log n).







